{"version":3,"sources":["HexViewer.js","App.js","serviceWorker.js","index.js"],"names":["styles","content","flexGrow","width","height","display","color","main","padding","fileUpload","bar","minHeight","addressCol","flexWrap","flexShrink","overflow","addressBox","hex","numberOfBytesPerLine","value","flexBasis","byte","diff","backgroundColor","buf2txt","buffer","String","fromCharCode","Uint8Array","split","decimalToHex","d","Number","toString","substr","length","HexViewer","props","classes","onLoadFile","onScrollUpdate","state","file","diffs","bytes","offsets","values","maxLines","sliderValue","currentStart","numberOfLines","this","setState","Math","floor","scrollPosition","byteLength","setContent","MaxOffsetInPage","slice","Array","prototype","map","call","x","join","match","i","push","localOffset","realOffset","find","element","className","AppBar","position","Button","component","type","style","onChange","e","target","files","Paper","elevation","Box","offset","Divider","orientation","id","isDifferent","Component","withStyles","App","currentDiff","file1","file2","targetFile","ranges","window","addEventListener","ev","keyCode","navigateToNextDiff","navigateToPrevDiff","start","minNumberOfBytes","maxNumberOfBytes","executeSingleIteration","array","result","same","j","currentBytesCount","r","posibleOffsets","numberOfSameBytes","end","range","findPossiblePositionst","console","log","indexInTarget","old","JSON","stringify","blob","file_name","size","saver","document","createElement","blobURL","href","URL","createObjectURL","body","download","appendChild","dispatchEvent","MouseEvent","removeChild","revokeObjectURL","SaveBlobAs","Blob","min","offsetOfDiff","max","arrayBuffer","then","text","calculateDifferences","newValue","variant","onClick","onSave","bind","half","loadTargetFile","updateScroll","diffFile","loadFile1","verticalSpliter","loadFile2","React","minWidth","marginLeft","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ab81e61.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Paper, Box, Divider, Slider,AppBar,Toolbar, Button  } from '@material-ui/core';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nconst numberOfBytesPerLine = 12;\r\nconst styles = {\r\n\r\n  content: {\r\n    flexGrow: 0,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    color: \"text.primary\"\r\n\r\n  },\r\n  main: {\r\n    width: \"100%\",\r\n    height: \"100%\", \r\n    padding: \"2%\" \r\n  },\r\n  fileUpload: {\r\n    padding: \"0px\"\r\n  },\r\n  bar: {\r\n      height: \"20px\",\r\n      minHeight: \"20px\",\r\n  },\r\n  addressCol: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flexGrow: \"0\",\r\n    flexShrink: \"0\",\r\n    overflow: \"hidden\",\r\n    width: \"100px\",\r\n  },\r\n  addressBox: {\r\n    width: \"100%\",\r\n    height: \"20px\",\r\n    overflow: \"hidden\"\r\n  },\r\n  hex: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flexGrow: \"0\",\r\n    flexShrink: \"0\",\r\n    overflow: \"hidden\",\r\n    width: numberOfBytesPerLine * 20 + \"px\",\r\n  },\r\n  value: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flexGrow: \"0\",\r\n    flexShrink: \"0\",\r\n    overflow: \"hidden\",\r\n    flexBasis: numberOfBytesPerLine * 20 + \"px\",\r\n  },\r\n  byte: {\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n    overflow: \"hidden\",\r\n    flexWrap: \"wrap\",\r\n    flexGrow: \"0\",\r\n    flexShrink: \"0\",\r\n  },\r\n  diff: {\r\n    backgroundColor: \"red\",\r\n  }\r\n}\r\n\r\nfunction buf2txt(buffer) { // buffer is an ArrayBuffer\r\n    return String.fromCharCode(...new Uint8Array(buffer)).split(\"\");\r\n}\r\n\r\nfunction buf2hex(buffer) { // buffer is an ArrayBuffer\r\n    return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\r\n}\r\n\r\nfunction decimalToHex(d) {\r\n    var hex = Number(d).toString(16);\r\n    hex = \"0x0000000000\".substr(0, 10 - hex.length) + hex;\r\n    return hex;\r\n  }\r\n\r\nclass HexViewer extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.styles = props.classes;\r\n        this.onLoadFile = props.onLoadFile;\r\n        this.onScrollUpdate = props.onScrollUpdate;\r\n        this.state = {\r\n             file: [0],\r\n             diffs: [],\r\n             bytes: [\"00\"],\r\n             offsets: [\"0x0000000000\"],\r\n             values: [\".\"],\r\n             maxLines: props.maxLines ? props.maxLines : 25,\r\n             sliderValue: 0,\r\n             currentStart: 0,\r\n             numberOfLines: 1\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        //console.log(Math.floor(props.scrollPosition / numberOfBytesPerLine));\r\n        this.setState({\r\n            file: props.file,\r\n            currentStart: Math.floor(props.scrollPosition / numberOfBytesPerLine) * numberOfBytesPerLine,\r\n            diffs: props.diffs ? props.diffs : [],\r\n            numberOfLines: (Math.floor(props.file.byteLength /numberOfBytesPerLine) + 1),\r\n            sliderValue: Math.floor(props.scrollPosition / numberOfBytesPerLine), },\r\n            () => {\r\n                this.setContent();\r\n            }\r\n        );\r\n    }\r\n\r\n    // scrollContent(event, newValue) {\r\n    //     this.onScrollUpdate((this.state.numberOfLines - newValue) * numberOfBytesPerLine);\r\n    // }\r\n\r\n    setContent() {\r\n        const currentStart = this.state.currentStart;\r\n        const file = this.state.file;\r\n        var MaxOffsetInPage = currentStart + numberOfBytesPerLine * this.state.maxLines;\r\n\r\n        if (file.byteLength < MaxOffsetInPage) {\r\n            MaxOffsetInPage = file.byteLength;\r\n        }\r\n        \r\n        let content = file.slice(currentStart, MaxOffsetInPage);\r\n        if(!content.byteLength) {\r\n            return;\r\n        }\r\n        const bytes = buf2hex(content).match(/.{1,2}/g);\r\n        const offsets = [];\r\n        for(let i = currentStart; i < MaxOffsetInPage; i+=numberOfBytesPerLine) {\r\n            offsets.push(decimalToHex(i));\r\n        }\r\n        this.setState({\r\n            bytes: bytes,\r\n            offsets: offsets,\r\n            values: buf2txt(content),\r\n        });\r\n    }\r\n\r\n    isDifferent(localOffset) {\r\n        let realOffset = this.state.currentStart + localOffset;\r\n        const found = this.state.diffs.find(element => element == realOffset);\r\n        if (found) {\r\n             return this.styles.diff;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div  className={this.styles.main}>\r\n            <AppBar position=\"static\" className={this.styles.bar}>\r\n                    <Button\r\n                    className={this.styles.fileUpload}\r\n                    component=\"label\">\r\n                        Upload File\r\n                        <input\r\n                            type=\"file\"\r\n                            style={{ display: \"none\" }}\r\n                            onChange={ (e) => this.onLoadFile(e.target.files) }\r\n                        />\r\n                    </Button>  \r\n            </AppBar>   \r\n\r\n            <Paper elevation={3} className={this.styles.content} >\r\n                <Box display=\"flex\" flexGrow=\"1\">\r\n                 <Box className={this.styles.addressCol}>\r\n                     {this.state.offsets.map(offset =>  <span className={this.styles.addressBox}>{offset}</span>)}\r\n                 </Box>\r\n                 <Divider orientation=\"vertical\" />\r\n                 <Box className={this.styles.hex} >\r\n                     {this.state.bytes.map(\r\n                         (byte, offset) =>  \r\n                         <span id={this.state.currentStart +  offset}\r\n                         className={this.styles.byte + \" \" + this.isDifferent(offset)}>\r\n                             {byte}\r\n                             </span>)}\r\n                 </Box>\r\n                 <Divider orientation=\"vertical\" />\r\n                 <Box className={this.styles.value} >\r\n                     {this.state.values.map(value =>  <span className={this.styles.byte}>{value}</span>)}\r\n                 </Box>\r\n\r\n                </Box>\r\n                {/* <Slider\r\n                    orientation=\"vertical\"\r\n                    aria-labelledby=\"vertical-slider\"\r\n                    min={0}\r\n                    step={numberOfBytesPerLine}\r\n                    max={this.state.numberOfLines}\r\n                    onChange={(ev, v) => {this.scrollContent(ev, v)}}\r\n                    value={this.state.sliderValue}\r\n                /> */}\r\n            </Paper>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(HexViewer);","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Button, Box, AppBar } from '@material-ui/core';\nimport HexViewer from './HexViewer';\n//import { connect } from 'react-redux';\n\nconst styles = {\n  main: {\n    flexGrow: 1,\n    width: \"100%\",\n    height: \"50%\",\n    display: \"flex\",\n    color: \"text.primary\"\n  },\n  bar: {\n      height: \"20px\",\n      minHeight: \"20px\",\n  },\n  half: {\n    width: \"100%\",\n    minWidth: \"500px\",\n  },\n  diffFile: {\n    flexGrow: 0,\n    display: \"flex\",\n    height: \"45%\",\n    width: \"90%\",\n    marginLeft: \"5%\",\n  },\n  verticalSpliter: {\n    flexGrow: 0,\n    display: \"flex\",\n    height: \"10%\",\n    width: \"90%\",\n  }\n};\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    this.styles = props.classes;\n    this.currentDiff = 0;\n    this.state = {\n      file1: \"00\",\n      file2: \"00\",\n      targetFile: \"00\",\n      scrollPosition: 0,\n      diffs: [],\n      ranges: [],\n    };\n\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", (ev) => {\n      if (ev.keyCode == 39) {\n        this.navigateToNextDiff();\n      }\n      if (ev.keyCode == 37) {\n        this.navigateToPrevDiff();\n      }\n    });\n  }\n\n  findPossiblePositionst(file, target, start, minNumberOfBytes = 4, maxNumberOfBytes = 1000) {\n\n    let executeSingleIteration = (array, target) => {\n      let result = [];\n      for (let i = 0; i < target.length - array.length; ++i) {\n        let same = true;\n        for(let j = 0; j < array.length; j++) {\n          if(target[i + j] != array[j]) {\n            same = false;\n            break;\n          }\n        }\n        if (same) {\n          result.push(i);\n        }\n      }\n      return result;\n    }\n\n    let result = [];\n    let currentBytesCount = minNumberOfBytes;\n    for(; currentBytesCount < maxNumberOfBytes; ++currentBytesCount) {\n      let array = file.slice(start - currentBytesCount, start);\n\n      let r = executeSingleIteration(array, target);\n      if (r.length == 0) {\n        break;\n      }\n      if (r.length == 1) {\n        result = r;\n        break;\n      }\n      result = r;\n    }\n    return {posibleOffsets: result, numberOfSameBytes : currentBytesCount};\n  }\n\n  calculateDifferences() {\n    let file1 = new Uint8Array(this.state.file1);\n    let file2 = new Uint8Array(this.state.file2);\n    let targetFile = new Uint8Array(this.state.targetFile);\n\n    if(this.state.file1 == \"00\" || this.state.file2 == \"00\") {\n      return;\n    }\n\n    if (file1.length != file2.length) {\n      return;\n    }\n    let diffs = [];\n    for(let i = 0; i < file1.byteLength; ++i) {\n      if (file1[i] != file2[i]) {\n        diffs.push(i);\n      }\n    }\n\n\n    let ranges = [];\n    let currentStart = 0;\n    let maxDiff = 20;\n    let numberOfBytesBefore = maxDiff;\n    for(let i = 1; i < diffs.length; ++i) {\n      if(diffs[i] - diffs[i - 1] > maxDiff ||  i + 1 == diffs.length) {\n        ranges.push({\n          start: diffs[currentStart],\n          end: diffs[i-1],});\n        currentStart = i;\n      }\n    }\n    this.setState({\n      diffs: diffs,\n      ranges: ranges,\n    }, () => {\n      this.navigateToPrevDiff();\n    })\n\n   if(targetFile == \"00\" || file1.length  != targetFile.length) {\n      return;\n    }\n\n    ranges = ranges.map( range => {\n      return {...range\n              , ...this.findPossiblePositionst(file1, targetFile, range.start)\n      };\n    });\n\n    this.setState({\n      diffs: diffs,\n      ranges: ranges,\n    })\n    console.log(ranges);\n  }\n\n  onSave(ev) {\n\n    function SaveBlobAs(blob, file_name) {  \n        console.log(`Save file with size ${blob.size}`)\n        var saver = document.createElement(\"a\");\n        var blobURL = saver.href = URL.createObjectURL(blob);\n        let body = document.body;\n    \n        saver.download = file_name;\n        body.appendChild(saver);\n        saver.dispatchEvent(new MouseEvent(\"click\"));\n        body.removeChild(saver);\n        URL.revokeObjectURL(blobURL);\n    }\n\n    let targetFile = new Uint8Array(this.state.targetFile);\n    console.log(`Target file size ${targetFile.length}`)\n    let ranges = this.state.ranges;\n    for(let r of ranges) {\n      if(r.posibleOffsets.length == 1) {\n        let offset = r.posibleOffsets[0];\n        for(let i = r.start; i < r.end; ++i) {\n          let indexInTarget = offset + i - r.start;\n          let old = targetFile[indexInTarget];\n          targetFile[indexInTarget] = this.state.file2[i];\n          console.log(`Change ${old} to ${targetFile[indexInTarget]}`);\n        }\n      }\n      else {\n       console.log(`Not solved: ${JSON.stringify(r)}`);\n      }\n    }\n    SaveBlobAs(new Blob([targetFile]), \"pesho.bin\");\n  }\n\n  navigateToNextDiff() {\n\n    this.currentDiff = Math.min(++this.currentDiff, this.state.ranges.length -1);\n    let offsetOfDiff = this.state.ranges[this.currentDiff].start;\n    this.setState({\n      scrollPosition: offsetOfDiff,\n    }) \n  }\n\n  navigateToPrevDiff() {\n    this.currentDiff = Math.max(--this.currentDiff, 0);\n    let offsetOfDiff = this.state.ranges[this.currentDiff].start;\n    this.setState({\n      scrollPosition: offsetOfDiff,\n    })\n   \n  }\n\n  loadTargetFile(files) {\n    if(files.length == 1) {\n      files[0].arrayBuffer().then(text => this.setState({\n        targetFile: text\n      }, () => {\n        this.calculateDifferences();\n        })\n      );\n    }\n  }\n  loadFile1(files) {\n    if(files.length == 1) {\n      files[0].arrayBuffer().then(text => this.setState({\n        file1: text\n      }, () => {\n        this.calculateDifferences();\n        })\n      );\n    }\n  }\n  loadFile2(files) {\n    if(files.length == 1) {\n      files[0].arrayBuffer().then(text => this.setState({\n        file2: text\n      },  () => {\n        this.calculateDifferences();\n        })\n      );\n    }\n  }\n\n  updateScroll(newValue) {\n    console.log(newValue);\n    this.setState({\n      scrollPosition: newValue,\n    })\n  }\n  render() {\n    return (\n        <Box className={this.styles.main}>\n          <Button variant=\"contained\" color=\"primary\" onClick={this.onSave.bind(this)}>\n            Save As\n          </Button>\n          <Box className={this.styles.half}>\n            <HexViewer file={this.state.targetFile}\n            maxLines=\"20\"\n            scrollPosition={this.state.scrollPosition}\n            onLoadFile={this.loadTargetFile.bind(this)}\n            onScrollUpdate={this.updateScroll.bind(this)}\n            ></HexViewer>\n          </Box>\n          <Box className={this.styles.half}>\n            <Box className={this.styles.diffFile}> \n              <HexViewer diffs={this.state.diffs}\n              file={this.state.file1}\n              maxLines=\"10\"\n              scrollPosition={this.state.scrollPosition}\n              onLoadFile={this.loadFile1.bind(this)}\n              onScrollUpdate={this.updateScroll.bind(this)}></HexViewer>\n            </Box>\n            <Box className={this.styles.verticalSpliter}></Box>\n            <Box className={this.styles.diffFile}>\n              <HexViewer diffs={this.state.diffs}\n              file={this.state.file2}\n              maxLines=\"10\"\n              scrollPosition={this.state.scrollPosition}\n              onLoadFile={this.loadFile2.bind(this)}\n              onScrollUpdate={this.updateScroll.bind(this)}></HexViewer>\n            </Box>\n        </Box>\n        </Box>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}